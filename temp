#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
int answer = 100, _dist = 0;
int tmpDist = 1;
int map[11][11] = {0,};
vector<vector<pair<int,pair<int, int>>>> memCnt;

// time번째에 가능한 모든 회원의 배치 조합에 대해 재귀로 다음 time으로 넘기기
void dfs(int, int, int);

void dfs2(int size, int time, int idx){
    cout<<memCnt[time].size()<<", "<<idx<<endl;
    if(idx == memCnt[time].size()){
        int distSum = 0;
        // 현 map의 거리합 측정
        distSum = tmpDist++;
        dfs(size, time+1, distSum);
        return;
    }
    
    int chk = 0;
    if(time > 0)
        for(int i=idx; i<memCnt[time-1].size(); i++)
            if(memCnt[time-1][i].first == memCnt[time][idx].first){
                chk = 1;
                break;
            }
    if(chk == 0){
        for(int y=0; y<size; y++){
            for(int x=0; x<size; x++){
                map[y][x] = memCnt[time][idx].first;
                dfs2(size, time, idx+1);
                map[y][x] = 0;
            }
        }
    }
    return;
}

// dfs(0번째 타임입니다,현재까지 가장 가까운 거리는 100이네요)
void dfs(int size, int time, int dist){
    cout<<"dfs func - time : " << time << ", dist : " << dist<<endl;
    // time이 끝까지 도달한 경우
    if(time == memCnt.size()){
        // TODO 수정 필요
        if(_dist > dist) _dist = dist; // 도달한 애들 중 제일 큰애
        if(_dist == 100) answer = 0; // 한개뿐이면 거리는 0으로 바꾸기
        if(answer > _dist) answer = _dist; // 더 짧은 거리를 찾은 경우
        return;
    }
    dfs2(size, time, 0); /*dfs2에 현재 time번째에 0번째 멤버가 샤워하고 있습니다*/
    return;
}

int solution(int n, int m, vector<vector<int>> timetable) {    
    // 시계열로 한번에 존재하는 인원 파악
    sort(timetable.begin(), timetable.end());
    
    for(int i=600; i<=1320; i++){
        int cnt=0;
        vector<pair<int, pair<int, int>>> tmp;
        for(int j=0; j<timetable.size(); j++)
            if(i >= timetable[j][0] && i <= timetable[j][1]) {
                tmp.push_back(make_pair(j+1, make_pair(timetable[j][0], timetable[j][1])));
                cnt++;
            }
        //sort(tmp.begin(), tmp.end());
        if((memCnt.size() == 0 || memCnt.back().size() != cnt)&&cnt!=0) 
            memCnt.push_back(tmp);
    }
    
    
    // memCnt 어떤 데이터 저장되는지 확인
    
    for(int i=0; i<memCnt.size(); i++){
        for(int j=0; j<memCnt[i].size(); j++){
            cout<<"("<<memCnt[i][j].first<<" - "<<memCnt[i][j].second.first<<", "<<memCnt[i][j].second.second<<") ";
        }
        cout<<endl;
    }
    
    // dfs로 가장 가까운 손님간 거리 찾기
    // dfs(0번째 타임, 0번째타임의 0번째 녀석,가장 가까운 거리는 100)
    dfs(n, 0, 100);
    
    return answer;
}
